Generating a Training Set
===================================

To parameterize a Force Field, first the training set must be generated.  MCSMRFF
comes with a built in Training Set Generator to assist in generating a robust set.
To use it, you must first have a set of "seed" molecules.  These should be in the
Chemical Markup Language (CML) file format, such as the following example of MAPbCl3:

.. code-block:: bash

    <molecule>
      <atomArray>
        <atom id="a1" elementType="C" label="234" x3="2.856348" y3="3.465525" z3="2.882101"/>
        <atom id="a2" elementType="N" label="230" x3="2.065567" y3="2.498566" z3="2.094128"/>
        <atom id="a3" elementType="H" label="85" x3="3.535110" y3="2.922596" z3="3.560587"/>
        <atom id="a4" elementType="H" label="85" x3="2.178424" y3="4.101417" z3="3.475260"/>
        <atom id="a5" elementType="H" label="85" x3="3.449516" y3="4.098951" z3="2.201873"/>
        <atom id="a6" elementType="H" label="233" x3="1.464495" y3="1.844420" z3="2.661628"/>
        <atom id="a7" elementType="H" label="233" x3="2.631700" y3="1.844694" z3="1.490830"/>
        <atom id="a8" elementType="H" label="233" x3="1.384889" y3="2.928154" z3="1.415175"/>
        <atom id="a9" elementType="Pb" label="356" x3="0.134939" y3="0.094135" z3="0.152826"/>
        <atom id="a10" elementType="Cl" label="344" x3="2.767340" y3="0.232853" z3="0.077164"/>
        <atom id="a11" elementType="Cl" label="344" x3="-0.138816" y3="2.703617" z3="-0.100291"/>
        <atom id="a12" elementType="Cl" label="344" x3="0.070357" y3="0.210233" z3="2.786018"/>
      </atomArray>
      <bondArray>
        <bond atomRefs2="a8 a2" order="1"/>
        <bond atomRefs2="a7 a2" order="1"/>
        <bond atomRefs2="a2 a6" order="1"/>
        <bond atomRefs2="a2 a1" order="1"/>
        <bond atomRefs2="a5 a1" order="1"/>
        <bond atomRefs2="a1 a4" order="1"/>
        <bond atomRefs2="a1 a3" order="1"/>
      </bondArray>
    </molecule>

Note, however, that a more robust way to define this molecule would be to split apart the
two constituents (MA and PbCl3) into different molecules.  This is taken advantage of in
the training set generator to gain some more conformations.  An example of how to accomplish
this in CML is as follows:

.. code-block:: bash

    <molecule>
      <molecule>
        <atomArray>
          <atom id="a1" elementType="C" label="234" x3="2.856348" y3="3.465525" z3="2.882101"/>
          <atom id="a2" elementType="N" label="230" x3="2.065567" y3="2.498566" z3="2.094128"/>
          <atom id="a3" elementType="H" label="85" x3="3.535110" y3="2.922596" z3="3.560587"/>
          <atom id="a4" elementType="H" label="85" x3="2.178424" y3="4.101417" z3="3.475260"/>
          <atom id="a5" elementType="H" label="85" x3="3.449516" y3="4.098951" z3="2.201873"/>
          <atom id="a6" elementType="H" label="233" x3="1.464495" y3="1.844420" z3="2.661628"/>
          <atom id="a7" elementType="H" label="233" x3="2.631700" y3="1.844694" z3="1.490830"/>
          <atom id="a8" elementType="H" label="233" x3="1.384889" y3="2.928154" z3="1.415175"/>
        </atomArray>
        <bondArray>
          <bond atomRefs2="a8 a2" order="1"/>
          <bond atomRefs2="a7 a2" order="1"/>
          <bond atomRefs2="a2 a6" order="1"/>
          <bond atomRefs2="a2 a1" order="1"/>
          <bond atomRefs2="a5 a1" order="1"/>
          <bond atomRefs2="a1 a4" order="1"/>
          <bond atomRefs2="a1 a3" order="1"/>
        </bondArray>
      </molecule>
      <molecule>
        <atomArray>
          <atom id="a1" elementType="Pb" label="356" x3="0.134939" y3="0.094135" z3="0.152826"/>
          <atom id="a2" elementType="Cl" label="344" x3="2.767340" y3="0.232853" z3="0.077164"/>
          <atom id="a3" elementType="Cl" label="344" x3="-0.138816" y3="2.703617" z3="-0.100291"/>
          <atom id="a4" elementType="Cl" label="344" x3="0.070357" y3="0.210233" z3="2.786018"/>
        </atomArray>
      </molecule>
    </molecule>

Now, to generate your training set you need only be in an empty folder, with the sub-folder "seed".
Afterwards, the following can be used to begin automatic training set generation:

.. code-block:: python

    import mcsmrff_train

    mcsmrff_train.create_training_set("set1",
                                      N_perterbations_per_seed=5,
                                      perterbation_dx=0.3,
                                      perterbation_dr=10,
                                      expansion_perterbation_dx=0.1,
                                      expansion_perterbation_dr=0.5,
                                      expansion_step=0.5,
                                      N_expansion=5,
                                      N_perterbations_per_expansion=5,
                                      min_seeds=True,
                                      training_sets_folder="training_set",
                                      queue=None,
                                      procs=1,
                                      persist=False)

This will then generate a training set in the subfolder "set1".  This set will include the following:

1. An optimized seed for each seed in your seed folder
2. N perterbations per seed in your seed folder (includes optimized seeds).  These perterbations are
   restricted to translations of *perterbation_dx* and general rotation angles of *perterbation_dr*.
3. N expansions, for which systems that have more than 1 molecule.  In this case, every pair-wise
   molecule sub-system is "expanded" in steps of *expansion_step*.  For each of these expansions, there
   are M more perterbations.

Thus, for the case of N seed molecules, with *min_seeds* set to true, we have the following number of
training set molecules:

:math:`N_{train\,set} = N*2*N_{perterbation}*M*N_{expansion}*N_{perterbation,expansion}`

Where *M* describes the total number of pairs within the seed folder.
